MOngoose Notes:
make a package.json file:
//Basic
npm init -y
npm install express ejs body-parser mongoose express-session --save

//SocketIO
npm install express ejs body-parser mongoose express-session socket.io --save

//Login/Reg installs
npm install express ejs body-parser mongoose express-session bcrypt mongoose-unique-validator --save

//npm install moment --save //Date management
npm install --save bcrypt-as-promised //bcrypt
//TEXT SEARCH
npm install mongoose-text-search --save

DEPENDECY NOTES:
Dependencies for Mongoose
-  Node.js + Express
	Again, we'll need a Node server to accept the different HTTP requests we'll need to perform basic CRUD (create, read, update, and delete) operations.
-  MongoDB
	Like before, in order to properly host our database server, we need the mongod daemon running in the background. The mongo terminal, however, is less recommended. If you properly configure your Mongoose code, your database and collections can be generated automatically upon the first write to the DB. For this reason, it's recommended to build your databases through your Mongoose code rather than manually create them in the terminal and try to connect.
	node_modules:
-  Mongoose
	The Mongoose module is how we'll set up the connection to our MongoDB within our Node server. Mongoose allows us to more properly structure our code for interaction with the DB, as well as define all the collections our app needs in the form of Schemas. Mongoose will be required for connecting the DB, as well as defining all of these schemas.
-  EJS
	We're not yet ready to replace EJS with a full front end framework, so for now, we'll keep using it. Again, EJS is just a really quick way for us to render views and pass them data, which allows us to focus on our Node backend.
-  Express
	Express and Node together again! By this point, you should know how useful Express is, especially when it comes to handling those incoming HTTP requests!
-  body-parser
	Body-Parser will continue to read the data passed by incoming HTTP requests, no matter if it comes in as part of the request's body, sent over the URL, or even sent as raw JSON.

Our Application After
Now that we have modularized our code, let's go over what each of the components does.



server.js

-	Always start with your server.js file
-	The server.js file acts as the home base for your application. This is where you require the routes and the mongoose configurations
-	The server.js also creates the express application, loads configurations onto it, and then tells it to listen!
server/config/routes.js
-	This is the file that specifies which routes will be handled and by which controller methods.
-	From routes.js we require the controller file (or files).
server/controllers/quotes.js
-	This is the file that handles all of the server-side logic. The controller is called upon by the routes.
-	The controller interacts with preloaded models to run database commands.
-	The controller sends the response to the client.
-	There can be many controllers in the server/controllers folder.
server/config/mongoose.js
-	This is the file that connects to the database and loads all of the models.
-	Here we specify a database to connect to and the path where all of our models are.
-	This file is required by server.js.
server/models/quote.js
-	This is the file that specifies the schema to be loaded by mongoose.
-	This file is required by mongoose.js.
-	We do not need to require this file in the controller, instead, the model itself is loaded from mongoose.
-	There can be many models in the server/models folder.