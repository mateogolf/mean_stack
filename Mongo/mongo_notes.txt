mongo notes



CRUD:

I)	CREATE

// Pattern:
db.COLLECTION_NAME.insert({YOUR_JSON_DOCUMENT})  
 
// Example:
db.ninjas.insert({name: "Trey", belt: "black", status: "awesome"})

II)	READ - Retrieving documents from a collection:

// Pattern: 
db.COLLECTION_NAME.find({YOUR_QUERY_DOCUMENT})
// Example:
db.ninjas.find({name: "Trey"})
//Find all:
db.ninjas.find()
// Example:
db.ninjas.find({_id: ObjectId("5462a78e514e258182f4c69a")})
// Notice: You can't just pass the string of characters, you must pass it as an ObjectId.

III)	DESTROY - Removing documents from a collection:

// Pattern:
db.COLLECTION_NAME.remove({YOUR_QUERY_DOCUMENT}, BOOLEAN)
// Example
db.ninjas.remove({belt: "yellow"})
db.ninjas.remove({belt: "yellow"}, false) // this query would have the same effect as the one above.

IV)	UPDATE - Updating documents in a collection:

// Pattern:
db.COLLECTION_NAME.update({QUERY}, {FIELDS_TO_UPDATE}, {OPTIONS})  
// Note: the options document is optional
// Example:
db.ninjas.update({name: "Trey"}, {$set: {location: "Mountain View"}})


Query Syntax:
example:
db.dojos.find({number_of_students: {$gt: 15}})

name				description
$gt (greater than)		Use to query selectively on numerical-valued fields
$gte (greater than or equal to)	Use to query selectively on numerical-valued fields
$lt (less than)			Use to query selectively on numerical-valued fields
$lte (less than or equal to)	Use to query selectively on numerical-valued fields
$in (in array)			Use to find documents who have a particular value within an array.

Query w/ arrays

Name		Description
$push		Push to an array contained within a document.
$pop		Removes either the first or last element from an array. EX:
		db.COLLECTION.update({QUERY}, {$pop: {array_key: (1 or -1)}})
  
		Use 1 for the last item in the array, -1 for the first item.
$addToSet	It functions just like $push.  However, $addToSet only adds to the specified array if the value doesn't already exist (thereby preventing duplicate entries).
$pull		Removes a specified value from an array, unlike $pop, which removes by location. Ex:
		db.COLLECTION.update({QUERY}, {$pull: {array_key: VALUE}})
  
		This will remove all instances of VALUE from the documents with the array specified by the array_key that match QUERY.

